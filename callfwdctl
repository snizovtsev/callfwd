#!/usr/bin/env python3

import socket
import array
import sys
import os
import tempfile


XDG_RUNTIME_DIR = os.getenv("XDG_RUNTIME_DIR")
CALLFWD_SERVER_PATH = os.path.join(XDG_RUNTIME_DIR, "callfwd")

class CallFwdControl(object):
    def __init__(self, doorbell, server=None):
        if server is None:
            server = CALLFWD_SERVER_PATH
        sock = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
        sock.bind(doorbell)
        sock.connect(server)
        self.sock = sock

    def _make_request(self, cmd, fds):
        cdata = array.array("i", [2] + fds)
        cmsg = (socket.SOL_SOCKET, socket.SCM_RIGHTS, cdata)
        self.sock.sendmsg([cmd], [cmsg])

    def _wait_response(self):
        msg,_,_,_ = self.sock.recvmsg(10)
        print("Success" if msg == b'S' else 'Failure')
        if msg != b'S':
            exit(1)

    def reload_db(self, new_db):
        with open(new_db, "r") as f:
            self._make_request(b"LOAD_DB", [f.fileno()])
            self._wait_response()

    def verify_db(self, backup_db):
        with open(backup_db, "r") as f:
            self._make_request(b"VERIFY_DB", [f.fileno()])
            self._wait_response()

    def dump_db(self, restored_db):
        with open(restored_db, "w+") as f:
            self._make_request(b"DUMP_DB", [f.fileno()])
            self._wait_response()

    def reload_acl(self, acl):
        with open(acl, "r") as f:
            self._make_request(b"LOAD_ACL", [f.fileno()])
            self._wait_response()


if __name__ == '__main__':
    with tempfile.TemporaryDirectory('callfwdctl') as tmpdir:
        doorbell = os.path.join(tmpdir, 'doorbell')
        ctl = CallFwdControl(doorbell)
        if sys.argv[1] == 'reload':
            ctl.reload_db(sys.argv[2])
        elif sys.argv[1] == 'verify':
            ctl.verify_db(sys.argv[2])
        elif sys.argv[1] == 'dump':
            ctl.dump_db(sys.argv[2])
        elif sys.argv[1] == 'acl':
            ctl.reload_acl(sys.argv[2])
